# import UserWhereInput from './inputTypes.graphql'
# import UserOrderByInput from './inputTypes.graphql'

scalar DateTime

type User {
	id: ID!
	admin: Boolean!
	createdAt: DateTime!
	email: String!
	name: String!
	username: String!
}

type Query {
	waitingUsers(where: UserWhereInput, orderBy: UserOrderByInput): [User!]!
	me: User
	users(where: UserWhereInput, orderBy: UserOrderByInput): [User!]!
}

type Mutation {
	login(password: String!, username: String!): LoginResponse!
	signup(email: String!, name: String!, password: String!, username: String!): ResolverResponse!
	responseToWaitingUser(userId: ID!, accepted: Boolean!): Boolean!
	forgotPassword(email: String!): ResolverResponse!
	forgotPasswordConfirm(password: String!, password_confirm: String!, resetPasswordToken: String!): ResolverResponse!
}

interface AuthPayload {
	message: String
	success: Boolean!
}

type ResolverResponse implements AuthPayload {
	message: String
	success: Boolean!
}

type LoginResponse implements AuthPayload {
	message: String
	success: Boolean!
	token: String
}
