scalar DateTime

type User {
	id: ID!
	admin: Boolean!
	createdAt: DateTime!
	email: String!
	name: String!
	username: String!
}

type Query {
	accept_waiting_users: [User!]!
	me: User
	users: [User!]!
}

type Mutation {
	login(password: String!, username: String!): LoginResponse!
	signup(email: String!, name: String!, password: String!, username: String!): SignupResponse!
	responseWaitingUser(userId: ID!, accepted: Boolean!): Boolean!
}

interface AuthPayload {
	message: String
	success: Boolean!
}

type SignupResponse implements AuthPayload {
	message: String
	success: Boolean!
}

type LoginResponse implements AuthPayload {
	message: String
	success: Boolean!
	token: String
}
